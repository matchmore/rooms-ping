//
// MatchesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire
import Foundation

open class MatchesAPI: APIBase {
    /**
     Get match for the device by its id

     - parameter deviceId: (path) The id (UUID) of the user device.
     - parameter matchId: (path) The id (UUID) of the match.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMatch(deviceId: String, matchId: String, completion: @escaping ((_ data: Match?, _ error: Error?) -> Void)) {
        getMatchWithRequestBuilder(deviceId: deviceId, matchId: matchId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get match for the device by its id
     - GET /devices/{deviceId}/matches/{matchId}
     - examples: [{contentType=application/json, example={
     "createdAt" : 0,
     "publication" : {
     "duration" : 5.962133916683182,
     "createdAt" : 6,
     "worldId" : "aeiou",
     "topic" : "aeiou",
     "range" : 1.4658129805029452,
     "id" : "aeiou",
     "deviceId" : "aeiou",
     "properties" : ""
     },
     "id" : "aeiou",
     "subscription" : {
     "duration" : 7.061401241503109,
     "createdAt" : 5,
     "worldId" : "aeiou",
     "matchTTL" : 9.301444243932576,
     "matchDTL" : 3.616076749251911,
     "topic" : "aeiou",
     "range" : 2.3021358869347655,
     "selector" : "aeiou",
     "pushers" : [ "aeiou" ],
     "id" : "aeiou",
     "deviceId" : "aeiou"
     }
     }}]

     - parameter deviceId: (path) The id (UUID) of the user device.
     - parameter matchId: (path) The id (UUID) of the match.

     - returns: RequestBuilder<Match>
     */
    open class func getMatchWithRequestBuilder(deviceId: String, matchId: String) -> RequestBuilder<Match> {
        var path = "/devices/{deviceId}/matches/{matchId}"
        path = path.replacingOccurrences(of: "{deviceId}", with: "\(deviceId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{matchId}", with: "\(matchId)", options: .literal, range: nil)
        let URLString = AlpsAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Match>.Type = AlpsAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get matches for the device

     - parameter deviceId: (path) The id (UUID) of the device.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMatches(deviceId: String, completion: @escaping ((_ data: Matches?, _ error: Error?) -> Void)) {
        getMatchesWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get matches for the device
     - GET /devices/{deviceId}/matches
     - examples: [{contentType=application/json, example=""}]

     - parameter deviceId: (path) The id (UUID) of the device.

     - returns: RequestBuilder<Matches>
     */
    open class func getMatchesWithRequestBuilder(deviceId: String) -> RequestBuilder<Matches> {
        var path = "/devices/{deviceId}/matches"
        path = path.replacingOccurrences(of: "{deviceId}", with: "\(deviceId)", options: .literal, range: nil)
        let URLString = AlpsAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Matches>.Type = AlpsAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
