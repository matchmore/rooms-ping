//
// Subscription.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

/** A subscription can be seen as a JMS subscription extended with the notion of geographical zone. The zone again being defined as circle with a center at the given location and a range around that location.  */
open class Subscription: JSONEncodable {
    /** The id (UUID) of the subscription. */
    public var id: String?
    /** The timestamp of the subscription creation in seconds since Jan 01 1970 (UTC).  */
    public var createdAt: Int64?
    /** The id (UUID) of the world that contains device to attach a subscription to. */
    public var worldId: String?
    /** The id (UUID) of the device to attach a subscription to. */
    public var deviceId: String?
    /** The topic of the subscription. This will act as a first match filter. For a subscription to be able to match a publication they must have the exact same topic.  */
    public var topic: String?
    /** This is an expression to filter the publications. For instance &#39;job&#x3D;&#39;developer&#39;&#39; will allow matching only with publications containing a &#39;job&#39; key with a value of &#39;developer&#39;.  */
    public var selector: String?
    /** The range of the subscription in meters. This is the range around the device holding the subscription in which matches with publications can be triggered.  */
    public var range: Double?
    /** The duration of the subscription in seconds. If set to &#39;0&#39; it will be instant at the time of subscription. Negative values are not allowed.  */
    public var duration: Double?
    /** Duration in seconds. Defaults to subscription duration (only one match will be delivered for pub/sub pair), this parameter tells when to deliver consecutive matches with the same publication. For example, there is a match between publication and subscription and after matchTTL time publication and subscription are still in the range of each other next match will be sent to subscription. This parameter is useful when you have long-lasting publications/subscriptions, and you want to be notified when a match occurs after some time.  */
    public var matchTTL: Double?
    /** Distance in meters. Defaults to two times the subscription range. This parameter says if the subscription will get a match again when the position of publication or subscription changes by matchDTL (publication and subscription still have to be in range after the change). This parameter is useful if you have large subscription/publication and subscription should get a match every time publication or subscription moves by matchDTL meters.  */
    public var matchDTL: Double?
    /** When match will occurs, they will be notified on these provided URI(s) address(es) in the pushers array.  */
    public var pushers: [String]?

    public init() {}

    // MARK: JSONEncodable

    open func encodeToJSON() -> Any {
        var nillableDictionary = [String: Any?]()
        nillableDictionary["id"] = id
        nillableDictionary["createdAt"] = createdAt?.encodeToJSON()
        nillableDictionary["worldId"] = worldId
        nillableDictionary["deviceId"] = deviceId
        nillableDictionary["topic"] = topic
        nillableDictionary["selector"] = selector
        nillableDictionary["range"] = range
        nillableDictionary["duration"] = duration
        nillableDictionary["matchTTL"] = matchTTL
        nillableDictionary["matchDTL"] = matchDTL
        nillableDictionary["pushers"] = pushers?.encodeToJSON()

        let dictionary: [String: Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
